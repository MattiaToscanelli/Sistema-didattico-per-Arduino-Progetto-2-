Esempio 1 – Fade
Il primo esempio realizzato permettte di dissolvere la luminosità del led a dipendenza della rotazione del potenziometro. Per cominciare andiamo ad includere la nostra libreria chiamata “Potenziometro.h”. In un secondo momento inizializziamo un oggetto associato alla classe Potenziometro,di nome potenziometro e successivamente dichiariamo una variabile led che conterrà la un valore intero (senza virgola) che indica la porta a cui è collegato il led. Nel setup creiamo una variabile potenziometro che andiamo poi ad istanziare e tramite il metodo pinMode passiamo come parametro la variabile led che contiene appunto il numero del pin che vogliamo impostare come output. Nel metodo loop che contiene una sequenza di istruzioni che viene ripetuta continuamente andiamo a “scrivere” sul led (e quindi a cambiarne la luminosità) il valore che leggiamo dal potenziometro. Questa scrittura sul led avviene tramite il metodo “analogWrite()”. Il primo parametro di questo metodo indica il pin su cui scriviamo il valore e il seconda indica il valore da scrivere. Il valore che si va a scrivere viene letto dal potenziometro tramite il metodo “valoreLetto()” che abbiamo spiegato prima.

Esempio 2 – Blink (!DA TOGLIERE!)
Il secondo esempio che abbiamo realizzato fa lampeggiare il led a dipendenza della rotazione del potenziometro. Per cominciare andiamo ad includere la nostra libreria chiamata “Potenziometro.h”. In un secondo momento inizializziamo un oggetto associato alla classe Potenziometro, di nome potenziometro e successivamente dichiariamo una variabile led che conterrà la un valore intero (senza virgola) che indica la porta a cui è collegato il led. Nel setup creiamo una variabile potenziometro che andiamo poi ad istanziare e tramite il metodo pinMode passiamo come parametro la variabile led che contiene appunto il numero del pin che vogliamo impostare come output. Nel metodo loop andiamo inizialmente a far fare un pausa della durata del valore letto dal potenziometro (in millisecondi) moltiplicato per due. Il valore andrà quindi da 0 a 510 che saranno i millisecondi di pausa. Successivamente accendiamo il led tramite il metodo digitalWrite. Come primo parametro passiamo il led da accendere e come seconda parametro la parola chiave “HIGH” che indica appunto che il led è acceso. Adesso svolgiamo come in precedenza una pausa della durata in millisecondi letta dal potenziometro e poi moltiplicata per due. Infine sempre con il metodo digitalWrite andiamo a spegnere il led usando questa volta la parola chiave “LOW” come secondo parametro per indicare che il led viene spento.

Esempio 3 – FadePro (!DA TOGLIERE!)
Il terzo esempio che abbiamo realizzato è una versione alternativa del primo esempio in cui andiamo a far dissolvere la luminosità del led in base alla rotazione del potenziometro. Per cominciare andiamo ad includere la nostra libreria chiamata “Potenziometro.h”. In un secondo momento inizializziamo un oggetto associato alla classe Potenziometro, di nome potenziometro e successivamente dichiariamo una variabile led che conterrà la un valore intero (senza virgola) che indica la porta a cui è collegato il led. Nel setup creiamo una variabile potenziometro che andiamo poi ad istanziare e tramite il metodo pinMode passiamo come parametro la variabile led che contiene appunto il numero del pin che vogliamo impostare come output. Nel metodo loop creiamo una variabile “valore” in cui leggiamo il valore del potenziometro (da 0 a 255) ora tramite i costrutti if ed else andiamo a controllare se il valore del potenziometro è minore di 128 o maggiore. Nel primo caso scriviamo accendiamo il led con un intensità pari al valore del potenziometro moltiplicato per due. Nel secondo caso scriviamo nel led il valore massimo moltiplicato per due, meno il valore letto moltiplicato per 2 (così a meta “corsa” il led comincia a spegnersi).



Esempio 1  - ServoMotorStart (!DA FARE MEGLIO!)
Il primo esempio realizzato per questa libreria fa muovere il servo motor avanti e indietro. Per cominciare andiamo ad includere la nostra libreria chiamata “ServoMotor.h”. In un secondo momento inizializziamo un oggetto associato alla classe ServoMotor, di nome servoMotor e successivamente dichiariamo una variabile velocità, che conterrà la un valore intero (senza virgola), di default 20, che indica la velocità di movimento del motore. Nel setup istanziamo la variabile servoMotor assegnando il pin nelle parentesi (in questo caso il pin 3) e come secondo parametro (dopo la virgola) passiamo la velocità di movimento che varrà inizialmente 20. Nel loop facciamo girare il servo motor inizialmente con une velocità positiva fino a che la posizione raggiunge il valore di 180, a quel punto la velocità diventa negativa fino a che la posizione arriva a 0 e la velocità ritorna positiva. Questi passaggi vengono ripetuti all’infinito, gestiti tramite i costrutti if ed else if e azionati con il metodo “setVelocita()”. Alla fine del codice avviamo il servo motor tramite il metodo startServo().


Esempio 2  - ServoMotoreIncrement (!DA TOGLIERE!)
Il secondo esempio realizzato per questa libreria fa muovere il servo motor incrementando sempre di più la velocità. Per cominciare andiamo ad includere la nostra libreria chiamata “ServoMotor.h”. In un secondo momento inizializziamo un oggetto associato alla classe ServoMotor, di nome servoMotor e successivamente dichiariamo una variabile i, che conterrà un valore intero (senza virgola), inizialmente di 1, che indica la velocità iniziale di movimento del motore. Nel setup istanziamo la variabile servoMotor assegnando il pin nelle parentesi (in questo caso il pin 3) e come secondo parametro (dopo la virgola) passiamo la velocità iniziale di movimento che varrà inizialmente 1. Nel loop controlliamo con un if se la posizione supera i 180, in quel caso andiamo ad incrementare la velocità di 1 e la rendiamo negativa in modo da far tornare indietro il servo motor, a quel punto il servo procede fino a che la posizione arriva a 0 e a quel punto la velocità viene incrementata ancora e ritorna positiva. Questi passaggi vengono ripetuti all’infinito e modificati con il metodo “setVelocita()”. Alla fine del codice avviamo il servo motor tramite il metodo startServo().


Esempio 3  - ServoMotoreIncrement (!DA TOGLIERE!)
Il terzo esempio realizzato per questa libreria fa muovere il servo motor se il bottone viene premuto fino alla posizione 180. Al rilascio del bottone il servo motor torna alla posizione 0. Per cominciare andiamo ad includere la nostra libreria chiamata “ServoMotor.h”. In un secondo momento inizializziamo un oggetto associato alla classe ServoMotor, di nome servoMotor e successivamente dichiariamo una variabile velocità, che conterrà la un valore intero (senza virgola), di default 100, che indica la velocità di movimento del motore. Successivamente dichiariamo una variabile “val” che verificherà che il bottone è stato premuto o no. Viene inizalizzata infine la variabile “bottone” che specifica il pin del bottone. Nel setup istanziamo la variabile servoMotor assegnando il pin nelle parentesi (in questo caso il pin 3) e come secondo parametro (dopo la virgola) passiamo la velocità di movimento che varrà inizialmente 100. Nel loop controlliamo con un if se il bottone è premuto e la posizione del servo motor è superiore o uguale a 0, in quel caso andiamo ad impostare la velocità al servo motor in negativo (così torna indietro) e andiamo ad avviare il servo motor. Con un else if controlliamo se il bottone non è premuto e se la posizione del servo motor è inferiore o uguale a 180. In questo caso invece rendiamo la velocità del servo motor positiva così da farlo andare avanti e successivamente avviamo il motore con il metodo “startServo()”. Questi passaggi vengono ripetuti all’infinito.
